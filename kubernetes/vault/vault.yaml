apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault
  namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: vault
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: request-certificate
subjects:
- kind: ServiceAccount
  name: vault
  namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: role-tokenreview-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: vault
  namespace: vault
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-server
  namespace: vault
data:
  config.json: |
      {
        "listener": [
          {
            "tcp": {
              "address": "0.0.0.0:8200",
              "tls_cert_file": "/etc/tls/cert.pem",
              "tls_key_file": "/etc/tls/key.pem"
            }
          }
        ],
        "storage": {
          "consul": {
            "address": "127.0.0.1:8500",
            "scheme": "http",
            "path": "vault"
          }
        }
      }
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  namespace: vault
  name: vault-server
  labels:
    app: vault-server
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: vault-server
        color: blue
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - vault-server
                  - key: color
                    operator: In
                    values:
                      - blue
              topologyKey: failure-domain.beta.kubernetes.io/zone
      serviceAccountName: vault
      initContainers:
        - name: certificate-requestor
          image: gcr.io/the-psf/certificate-requestor:v1.0.0a1
          imagePullPolicy: Always
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          args:
            - "--additional-dnsnames=vault-server,vault-server.$(NAMESPACE),vault-server.$(NAMESPACE).svc.cluster.local"
            - "--cert-dir=/etc/tls"
            - "--namespace=$(NAMESPACE)"
            - "--pod-ip=$(POD_IP)"
            - "--pod-name=$(POD_NAME)"
            - "--service-names=vault-server"
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
      containers:
        - name: consul
          image: consul:1.0.1
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: GOSSIP_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: consul-gossip-secret
                  key: key
          args:
            - "agent"
            - "-advertise=$(POD_IP)"
            - "-bind=0.0.0.0"
            - "-retry-join=consul-0.consul-internal.$(NAMESPACE).svc.cluster.local"
            - "-retry-join=consul-1.consul-internal.$(NAMESPACE).svc.cluster.local"
            - "-retry-join=consul-2.consul-internal.$(NAMESPACE).svc.cluster.local"
            - "-domain=cluster.local"
            - "-encrypt=$(GOSSIP_ENCRYPTION_KEY)"
            - "-config-file=/etc/consul/config/server.json"
          ports:
            - containerPort: 8300
              name: server-rpc
            - containerPort: 8301
              name: serf-lan
            - containerPort: 8302
              name: serf-wan
            - containerPort: 8500
              name: http-api
            - containerPort: 8600
              name: dns-api
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
            - name: consul-config
              mountPath: /etc/consul/config
            - name: consul-data
              mountPath: /consul/data
        - name: vault-server
          image: vault:0.9.0
          imagePullPolicy: Always
          command: ["vault", "server", "-config", "/vault/config/config.json"]
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: VAULT_ADDR
            value: https://$(POD_IP):8200
          - name: VAULT_CACERT
            value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - name: VAULT_CLUSTER_ADDR
            value: https://$(POD_IP):8200
          ports:
            - containerPort: 443 
          resources:
            limits:
              memory: "50Mi"
              cpu: "100m"
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
            - name: vault-config
              mountPath: /vault/config/
          securityContext:
            readOnlyRootFilesystem: true
            capabilities:
              add:
              - IPC_LOCK
      volumes:
        - name: tls
          emptyDir: {}
        - name: consul-data
          emptyDir: {}
        - name: consul-config
          configMap:
            name: consul
        - name: vault-config
          configMap:
            name: vault-server
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vault-server
  name: vault-server
  namespace: vault
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 8200
  selector:
    app: vault-server
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
