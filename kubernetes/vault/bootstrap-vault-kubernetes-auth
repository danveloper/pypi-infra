#!/bin/bash

command -v jq > /dev/null 2>&1 || (echo "you must have 'jq' installed" && exit 1)

FIRST_POD=($(kubectl get pod -n vault -l 'app=vault-server' -o json | jq -r '.items[0] | "\(.metadata.name) \(.status.podIP)"'))
CA_CERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

POD_NAME=${FIRST_POD[0]}
POD_IP=${FIRST_POD[1]}

if [ -z $VAULT_TOKEN ]; then
  echo "You must supply VAULT_TOKEN env var with root privileges"
fi
if [ -z $CONSUL_MANAGEMENT_TOKEN ]; then
  echo ""
fi

lookup_self_response=$(
  kubectl exec -n vault $POD_NAME -c consul -- \
    curl --silent --show-error --fail \
    --cacert $CA_CERT \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    https://$POD_IP:8200/v1/auth/token/lookup-self
)
if [ $? -ne 0 ]; then
  echo "Failed to get https://$POD_IP:8200/v1/auth/token/lookup-self... check service status and networking?"
  echo $lookup_self_response
  exit 1
fi

groups=($(echo "$lookup_self_response" | jq -r '.data.policies[]'))
if ! [[ " ${groups[@]} " =~ " root " ]]; then
  echo "You must supply VAULT_TOKEN env var with root privileges"
  echo "Supplied VAULT_TOKEN does not have root policy" 
  exit 1
fi

auth_backends_response=$(
  kubectl exec -n vault $POD_NAME -c consul -- \
    curl --silent --show-error --fail \
    --cacert $CA_CERT \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    https://$POD_IP:8200/v1/sys/auth
)

backends=($(echo "$auth_backends_response" | jq -r '.data | values[].type'))
if [[ " ${backends[@]} " =~ " kubernetes " ]]; then
  echo "Kubernetes auth backend already mounted!"
else
  echo "Enabling Kubernetes auth backend"
  auth_enable_response=$(
    kubectl exec -n vault $POD_NAME -c consul -- \
      curl --silent --show-error --fail \
      --cacert $CA_CERT \
      --header "X-Vault-Token: $VAULT_TOKEN" \
      --request POST \
      https://$POD_IP:8200/v1/sys/auth/kubernetes \
      --data '
      {
        "type": "kubernetes",
        "description": "login for kubernetes pods via ServiceAccount JWT"
      }
      '
  )
  if [ $? -ne 0 ]; then
    echo "Failed to enable Kubernetes auth backend"
    echo $auth_enable_response
    exit 1
  fi
fi

echo "Configuring Kubernetes auth backend"
kubectl exec -it -n vault $POD_NAME -c vault-server -- \
  sh -c "VAULT_TOKEN="$VAULT_TOKEN" vault write auth/kubernetes/config \
    token_reviewer_jwt=@/var/run/secrets/kubernetes.io/serviceaccount/token \
    kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
    kubernetes_host=https://kubernetes.default.svc.cluster.local"

echo "Creating binding for default/default ServiceAccount"
create_role_response=$(
  kubectl exec -n vault $POD_NAME -c consul -- \
    curl --silent --show-error --fail \
    --cacert $CA_CERT \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --request POST \
    https://$POD_IP:8200/v1/auth/kubernetes/role/default-default \
    --data '
    {
      "bound_service_account_names": ["default"],
      "bound_service_account_namespaces": ["default"],
      "policies": ["default"],
      "ttl": "3600",
      "max_ttl": "86400"
    }
    '
)
if [ $? -ne 0 ]; then
  echo "Failed to create binding for default/default ServiceAccount"
  echo $create_role_response
  exit 1
fi
echo "Successfully created binding for default/default ServiceAccount"

echo "Creating Vault Policy for vault-enrollment-controller"
POLICY=$(python3 -c "import json; policy_doc = open('vault-policies/controller.hcl', 'rU').read().rstrip(); print(json.dumps(policy_doc))")
create_policy_response=$(
  kubectl exec -n vault $POD_NAME -c consul -- \
    curl --silent --show-error --fail \
    --cacert $CA_CERT \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --request POST \
    https://$POD_IP:8200/v1/sys/policy/vault-enrollment-controller \
    --data '{"rules": '"$POLICY"'}'
)
if [ $? -ne 0 ]; then
  echo "Failed to vault-enrollment-controller Vault Policy"
  echo $create_policy_response
  exit 1
fi
echo "Successfully created vault policy for vault-enrollment-controller"

echo "Creating Vault Policy for vault-enrollment-controller"
create_role_response=$(
  kubectl exec -n vault $POD_NAME -c consul -- \
    curl --silent --show-error --fail \
    --cacert $CA_CERT \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --request POST \
    https://$POD_IP:8200/v1/auth/kubernetes/role/vault-enrollment-controller \
    --data '
    {
      "bound_service_account_names": ["vault-enrollment-controller"],
      "bound_service_account_namespaces": ["vault"],
      "policies": ["vault-enrollment-controller"],
      "ttl": "3600",
      "max_ttl": "86400"
    }
    '
)
if [ $? -ne 0 ]; then
  echo "Failed to create binding for vault/vault-enrollment-controller ServiceAccount"
  echo $create_role_response
  exit 1
fi
echo "Successfully created binding for vault/vault-enrollment-controller ServiceAccount"

exit 0

#kubectl exec -it -n vault vault-server-9f65fbb95-4xb2t -c vault-server -- \
#  sh -c "VAULT_TOKEN="$VAULT_TOKEN" vault mount consul"
#kubectl exec -it -n vault vault-server-9f65fbb95-4xb2t -c vault-server -- \
#  sh -c "VAULT_TOKEN="$VAULT_TOKEN" vault write consul/config/access \
#    address=127.0.0.1:8500 \
#    token=$CONSUL_MANAGEMENT_TOKEN"
#
#POLICY='key "" { policy = "read" }'
#echo $POLICY | base64 | kubectl exec -it -n vault vault-server-9f65fbb95-4xb2t -c vault-server -- \
#  sh -c "VAULT_TOKEN="$VAULT_TOKEN" vault write consul/roles/readonly \
#    policy=- \
#    lease=30s \
#    token_type=client"
#    
