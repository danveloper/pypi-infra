#!/bin/bash

command -v jq > /dev/null 2>&1 || (echo "you must have 'jq' installed" && exit 1)

FIRST_POD=($(kubectl get pod -n vault -l 'app=vault-server' -o json | jq -r '.items[0] | "\(.metadata.name) \(.status.podIP)"'))
echo ${FIRST_POD[*]}

CA_CERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

if [ -z "$SECRET_SHARES" ]; then
  SECRET_SHARES=1
fi
if [ -z "$SECRET_THRESHOLD" ]; then
  SECRET_THRESHOLD=1
fi

echo "Connecting to ${FIRST_POD[0]} at ${FIRST_POD[1]}"

vault_status=$(
    kubectl exec -n vault ${FIRST_POD[0]} -c consul -- curl \
    --silent --show-error --fail \
    --cacert $CA_CERT \
    https://${FIRST_POD[1]}:8200/v1/sys/init
)
if [ $? -ne 0 ]; then
  echo "Failed to get Vault initialization status... check service status and networking?"
  echo $response
  exit 1
fi

if [ "$(echo $vault_status | jq -r '.initialized')" == "false" ]; then
  echo "bootstrapping vault!"
  init_response=$(
    kubectl exec -n vault ${FIRST_POD[0]} -c consul -- curl \
    --silent --show-error --fail \
    --cacert $CA_CERT \
    --data '{"secret_shares": '"$SECRET_SHARES"', "secret_threshold": '"$SECRET_THRESHOLD"'}' \
    https://${FIRST_POD[1]}:8200/v1/sys/init
  )
  if [ $? -ne 0 ]; then
    echo "Initializing Vault failed, check service status and networking?"
    echo $init_response
    exit 1
  fi
  root_token=$(echo $init_response | jq -r '.root_token')
  UNSEAL_KEYS_ARRAY=($(echo $init_response | jq -r '.keys[]'))
  unseal_keys=$(echo $init_response | jq -r '.keys[] | "- \(.)"')
  echo "*************************** Secure these! **************************"
  echo "****************** You will not see them again! ********************"
  echo "Initial Root Token: $root_token"
  echo "Unseal Key Shares (You must supply at least $SECRET_THRESHOLD to unseal:"
  echo "$unseal_keys"
  echo "****************** You will not see them again! ********************"
  echo "*************************** Secure these! **************************"
  echo "Vault successfully initialized"
else
  echo "Vault already initialized!"
fi

# Keys are in memory... might as well unseal!

echo "Unsealing existing vault-server instances"

while read POD_NAME POD_IP ; do
  seal_response=$(
    kubectl exec -n vault ${POD_NAME} -c consul -- curl \
      --silent --show-error --fail \
      --cacert $CA_CERT \
      https://${POD_IP}:8200/v1/sys/seal-status
  )
  if [ $? -ne 0 ]; then
    echo "Checking seal status of $POD_NAME failed, check service status and networking?"
    echo $init_response
    exit 1
  fi
  if [ "$(echo $seal_response | jq -r '.sealed')" == "true" ]; then
    echo "Unsealing $POD_NAME at $POD_IP"
    for (( c=0; c<$SECRET_THRESHOLD; c++ )); do
        unseal_response=$(kubectl exec -n vault ${POD_NAME} -c consul -- curl \
          --silent --show-error --fail \
          --cacert $CA_CERT \
          --request PUT \
          --data '{"key": "'"${UNSEAL_KEYS_ARRAY[$c]}"'"}' \
          https://${POD_IP}:8200/v1/sys/unseal)
        if [ $? -ne 0 ]; then
          echo "Unseal for $POD_NAME failed, check service status and networking?"
          echo $unseal_response
        fi
        if [ "$(echo $unseal_response | jq -r '.status.sealed')" == "false" ]; then
          break
        fi
    done
  else
    echo "$POD_NAME already unsealed... which is weird. Check that out"
  fi
done < <(kubectl get pod -n vault -l 'app=vault-server' -o json | jq -r '.items[] | "\(.metadata.name) \(.status.podIP)"')

exit 0
